import tkinter as tk
from tkinter import messagebox
import mysql.connector
from mysql.connector import Error

class AlimentosApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Cadastro de Alimentos")
        self.root.geometry("300x400")

        # Campos de entrada para nome, calorias, proteínas, carboidratos e gorduras
        self.label_nome = tk.Label(self.root, text="Nome:")
        self.label_nome.pack(pady=5)
        self.nome_entry = tk.Entry(self.root)
        self.nome_entry.pack(pady=5)

        self.label_calorias = tk.Label(self.root, text="Calorias:")
        self.label_calorias.pack(pady=5)
        self.calorias_entry = tk.Entry(self.root)
        self.calorias_entry.pack(pady=5)

        self.label_proteinas = tk.Label(self.root, text="Proteínas:")
        self.label_proteinas.pack(pady=5)
        self.proteinas_entry = tk.Entry(self.root)
        self.proteinas_entry.pack(pady=5)

        self.label_carboidratos = tk.Label(self.root, text="Carboidratos:")
        self.label_carboidratos.pack(pady=5)
        self.carboidratos_entry = tk.Entry(self.root)
        self.carboidratos_entry.pack(pady=5)

        self.label_gorduras = tk.Label(self.root, text="Gorduras:")
        self.label_gorduras.pack(pady=5)
        self.gorduras_entry = tk.Entry(self.root)
        self.gorduras_entry.pack(pady=5)

        # Botões para gravar, editar e excluir
        self.gravar_button = tk.Button(self.root, text="Gravar", command=self.gravar_dados)
        self.gravar_button.pack(pady=5)

        self.editar_button = tk.Button(self.root, text="Editar", command=self.editar_dados)
        self.editar_button.pack(pady=5)

        self.excluir_button = tk.Button(self.root, text="Excluir", command=self.excluir_dados)
        self.excluir_button.pack(pady=5)

        # Lista para exibir registros
        self.lista_dados = tk.Listbox(self.root)
        self.lista_dados.pack(pady=10)
        self.lista_dados.bind("<<ListboxSelect>>", self.selecionar_dado)

        # Conexão com o banco de dados
        self.conn = self.criar_conexao()
        if self.conn:
            self.carregar_dados()

    def criar_conexao(self):
        try:
            conn = mysql.connector.connect(
                host='localhost',
                user='root',
                password='acesso123',
                database='cadastro'
            )
            return conn
        except Error as e:
            messagebox.showerror("Erro", f'Erro ao conectar ao banco de dados: {e}')
            self.root.destroy()
            return None

    def carregar_dados(self):
        if not self.conn:
            return
        try:
            cursor = self.conn.cursor()
            cursor.execute("SELECT idalimentos, nome, calorias, proteinas, carboidratos, gorduras FROM alimentos")
            resultados = cursor.fetchall()
            self.lista_dados.delete(0, tk.END)  # Limpa a lista
            for idalimentos, nome, calorias, proteinas, carboidratos, gorduras in resultados:
                self.lista_dados.insert(tk.END, (idalimentos, nome, calorias, proteinas, carboidratos, gorduras))
            cursor.close()
        except Error as e:
            messagebox.showerror("Erro", f'Erro ao carregar dados: {e}')

    def gravar_dados(self):
        nome = self.nome_entry.get()
        calorias = self.calorias_entry.get()
        proteinas = self.proteinas_entry.get()
        carboidratos = self.carboidratos_entry.get()
        gorduras = self.gorduras_entry.get()

        if nome and calorias and proteinas and carboidratos and gorduras:
            try:
                cursor = self.conn.cursor()
                sql = "INSERT INTO alimentos (nome, calorias, proteinas, carboidratos, gorduras) VALUES (%s, %s, %s, %s, %s)"
                cursor.execute(sql, (nome, calorias, proteinas, carboidratos, gorduras))
                self.conn.commit()
                cursor.close()
                messagebox.showinfo("Sucesso", "Dados gravados com sucesso!")
                self.limpar_entradas()
                self.carregar_dados()
            except Error as e:
                messagebox.showerror("Erro", f'Erro ao gravar dados: {e}')
        else:
            messagebox.showwarning("Atenção", "Todos os campos devem estar preenchidos.")

    def editar_dados(self):
        if hasattr(self, 'selected_id'):
            nome = self.nome_entry.get()
            calorias = self.calorias_entry.get()
            proteinas = self.proteinas_entry.get()
            carboidratos = self.carboidratos_entry.get()
            gorduras = self.gorduras_entry.get()

            if nome and calorias and proteinas and carboidratos and gorduras:
                try:
                    cursor = self.conn.cursor()
                    sql = "UPDATE alimentos SET nome = %s, calorias = %s, proteinas = %s, carboidratos = %s, gorduras = %s WHERE idalimentos = %s"
                    cursor.execute(sql, (nome, calorias, proteinas, carboidratos, gorduras, self.selected_id))
                    self.conn.commit()
                    cursor.close()
                    messagebox.showinfo("Sucesso", "Dados editados com sucesso!")
                    self.limpar_entradas()
                    self.carregar_dados()
                except Error as e:
                    messagebox.showerror("Erro", f'Erro ao editar dados: {e}')
            else:
                messagebox.showwarning("Atenção", "Todos os campos devem estar preenchidos para editar.")
        else:
            messagebox.showwarning("Atenção", "Selecione um registro para editar.")

    def excluir_dados(self):
        if hasattr(self, 'selected_id'):
            try:
                cursor = self.conn.cursor()
                sql = "DELETE FROM alimentos WHERE idalimentos = %s"
                cursor.execute(sql, (self.selected_id,))
                self.conn.commit()
                cursor.close()
                messagebox.showinfo("Sucesso", "Dados excluídos com sucesso!")
                self.limpar_entradas()
                self.carregar_dados()
            except Error as e:
                messagebox.showerror("Erro", f'Erro ao excluir dados: {e}')
        else:
            messagebox.showwarning("Atenção", "Selecione um registro para excluir.")

    def selecionar_dado(self, event):
        try:
            selection = self.lista_dados.curselection()
            if selection:
                index = selection[0]
                self.selected_id, nome, calorias, proteinas, carboidratos, gorduras = self.lista_dados.get(index)
                self.nome_entry.delete(0, tk.END)
                self.nome_entry.insert(0, nome)
                self.calorias_entry.delete(0, tk.END)
                self.calorias_entry.insert(0, calorias)
                self.proteinas_entry.delete(0, tk.END)
                self.proteinas_entry.insert(0, proteinas)
                self.carboidratos_entry.delete(0, tk.END)
                self.carboidratos_entry.insert(0, carboidratos)
                self.gorduras_entry.delete(0, tk.END)
                self.gorduras_entry.insert(0, gorduras)
        except Exception as e:
            messagebox.showerror("Erro", f'Erro ao selecionar dado: {e}')

    def limpar_entradas(self):
        self.nome_entry.delete(0, tk.END)
        self.calorias_entry.delete(0, tk.END)
        self.proteinas_entry.delete(0, tk.END)
        self.carboidratos_entry.delete(0, tk.END)
        self.gorduras_entry.delete(0, tk.END)

    def fechar_conexao(self):
        if self.conn:
            self.conn.close()

if __name__ == "__main__":
    root = tk.Tk()
    app = AlimentosApp(root)
    root.protocol("WM_DELETE_WINDOW", app.fechar_conexao)
    root.mainloop()
