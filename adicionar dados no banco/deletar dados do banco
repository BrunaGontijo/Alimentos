import tkinter as tk
from tkinter import messagebox
import mysql.connector
from mysql.connector import Error

class CadastroApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Cadastro de Nomes")
        self.root.geometry("300x300")

        # Campo de entrada para o nome
        self.label = tk.Label(self.root, text="Nome:")
        self.label.pack(pady=10)

        self.nome_entry = tk.Entry(self.root)
        self.nome_entry.pack(pady=10)

        # Botão para gravar
        self.gravar_button = tk.Button(self.root, text="Gravar", command=self.gravar_nome)
        self.gravar_button.pack(pady=5)

        # Botão para editar
        self.editar_button = tk.Button(self.root, text="Editar", command=self.editar_nome)
        self.editar_button.pack(pady=5)

        # Botão para excluir
        self.excluir_button = tk.Button(self.root, text="Excluir", command=self.excluir_nome)
        self.excluir_button.pack(pady=5)

        # Lista para exibir nomes
        self.lista_nomes = tk.Listbox(self.root)
        self.lista_nomes.pack(pady=10)
        self.lista_nomes.bind("<<ListboxSelect>>", self.selecionar_nome)

        # Conexão com o banco de dados
        self.conn = self.criar_conexao()
        self.carregar_nomes()

    def criar_conexao(self):
        try:
            conn = mysql.connector.connect(
                host='localhost',
                user='root',
                password='acesso123',
                database='cadastro'
            )
            return conn
        except Error as e:
            messagebox.showerror("Erro", f'Erro ao conectar ao banco de dados: {e}')
            self.root.destroy()
            return None

    def carregar_nomes(self):
        """Carrega os nomes do banco de dados para a lista."""
        try:
            cursor = self.conn.cursor()
            cursor.execute("SELECT id, nome FROM pessoa")
            resultados = cursor.fetchall()
            self.lista_nomes.delete(0, tk.END)  # Limpa a lista
            for id, nome in resultados:
                self.lista_nomes.insert(tk.END, (id, nome))  # Adiciona nome à lista
            cursor.close()
        except Error as e:
            messagebox.showerror("Erro", f'Erro ao carregar nomes: {e}')

    def gravar_nome(self):
        nome = self.nome_entry.get()
        if nome:
            try:
                cursor = self.conn.cursor()
                cursor.execute("INSERT INTO pessoa (nome) VALUES (%s)", (nome,))
                self.conn.commit()
                cursor.close()
                messagebox.showinfo("Sucesso", "Nome gravado com sucesso!")
                self.nome_entry.delete(0, tk.END)  # Limpa o campo de entrada
                self.carregar_nomes()  # Atualiza a lista
            except Error as e:
                messagebox.showerror("Erro", f'Erro ao gravar nome: {e}')
        else:
            messagebox.showwarning("Atenção", "O campo nome não pode estar vazio.")

    def editar_nome(self):
        nome = self.nome_entry.get()
        if nome and hasattr(self, 'selected_id'):
            try:
                cursor = self.conn.cursor()
                cursor.execute("UPDATE pessoa SET nome = %s WHERE id = %s", (nome, self.selected_id))
                self.conn.commit()
                cursor.close()
                messagebox.showinfo("Sucesso", "Nome editado com sucesso!")
                self.nome_entry.delete(0, tk.END)  # Limpa o campo de entrada
                self.carregar_nomes()  # Atualiza a lista
            except Error as e:
                messagebox.showerror("Erro", f'Erro ao editar nome: {e}')
        else:
            messagebox.showwarning("Atenção", "Selecione um nome para editar.")

    def excluir_nome(self):
        if hasattr(self, 'selected_id'):
            try:
                cursor = self.conn.cursor()
                cursor.execute("DELETE FROM pessoa WHERE id = %s", (self.selected_id,))
                self.conn.commit()
                cursor.close()
                messagebox.showinfo("Sucesso", "Nome excluído com sucesso!")
                self.nome_entry.delete(0, tk.END)  # Limpa o campo de entrada
                self.carregar_nomes()  # Atualiza a lista
            except Error as e:
                messagebox.showerror("Erro", f'Erro ao excluir nome: {e}')
        else:
            messagebox.showwarning("Atenção", "Selecione um nome para excluir.")

    def selecionar_nome(self, event):
        """Carrega o nome selecionado na lista para o campo de entrada."""
        try:
            selection = self.lista_nomes.curselection()
            if selection:
                index = selection[0]
                self.selected_id, nome = self.lista_nomes.get(index)
                self.nome_entry.delete(0, tk.END)
                self.nome_entry.insert(0, nome)  # Preenche o campo de entrada com o nome
        except Exception as e:
            messagebox.showerror("Erro", f'Erro ao selecionar nome: {e}')

    def fechar_conexao(self):
        if self.conn:
            self.conn.close()

if __name__ == "__main__":
    root = tk.Tk()
    app = CadastroApp(root)
    root.protocol("WM_DELETE_WINDOW", app.fechar_conexao)
    root.mainloop()
